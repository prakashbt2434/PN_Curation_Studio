import React from 'react';

interface GeneratedImageDisplayProps {
  originalImage: File | null;
  generatedImage: string | null; // base64 string
  isLoading: boolean;
  error: string | null;
}

const LoadingSkeleton: React.FC = () => (
  <div className="animate-pulse flex items-center justify-center bg-gray-200 h-full w-full rounded-lg">
     <svg className="w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>
  </div>
);

export const GeneratedImageDisplay: React.FC<GeneratedImageDisplayProps> = ({ originalImage, generatedImage, isLoading, error }) => {
  const originalImageUrl = originalImage ? URL.createObjectURL(originalImage) : null;
  const generatedImageUrl = generatedImage ? `data:image/png;base64,${generatedImage}` : null;

  React.useEffect(() => {
    return () => {
      if (originalImageUrl) {
        URL.revokeObjectURL(originalImageUrl);
      }
    };
  }, [originalImageUrl]);

  const renderContent = () => {
    if (isLoading) {
      return <LoadingSkeleton />;
    }
    if (error) {
      return <p className="text-red-500 text-center">{error}</p>;
    }
    if (generatedImageUrl && originalImageUrl) {
      return (
        <div className="grid grid-cols-2 gap-2 h-full">
          <div className="relative group">
            <img src={originalImageUrl} alt="Original" className="w-full h-full object-cover rounded-lg" />
            <div className="absolute bottom-0 left-0 w-full p-1 bg-black bg-opacity-50 text-white text-xs text-center rounded-b-lg">Original</div>
          </div>
          <div className="relative group">
            <img src={generatedImageUrl} alt="Generated by AI" className="w-full h-full object-cover rounded-lg" />
            <div className="absolute bottom-0 left-0 w-full p-1 bg-black bg-opacity-50 text-white text-xs text-center rounded-b-lg">Generated</div>
          </div>
        </div>
      );
    }
     if (generatedImageUrl && !originalImageUrl) {
      return (
         <div className="relative group">
            <img src={generatedImageUrl} alt="Generated by AI" className="w-full h-full object-cover rounded-lg" />
            <div className="absolute bottom-0 left-0 w-full p-1 bg-black bg-opacity-50 text-white text-xs text-center rounded-b-lg">Generated</div>
          </div>
      );
    }
    
    return <p className="text-gray-500 text-center">Generated image will appear here when an image is uploaded.</p>;
  };

  return (
    <div className="w-full h-56 p-4 border border-gray-300 rounded-xl shadow-sm bg-orange-50/50 flex items-center justify-center">
      {renderContent()}
    </div>
  );
};
